import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile, CallbackQuery
import random
import aiohttp
from deep_translator import GoogleTranslator
from gtts import gTTS
import os

from config import TOKEN, WEATHER_API_KEY
import keyboards as kb

bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(Command('links'))
async def links(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É:", reply_markup=kb.inline_keyboard_url)

@dp.message(Command('dynamic'))
async def dynamic(message: Message):
    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=kb.inline_keyboard_more)

@dp.callback_query(F.data == 'more')
async def show_options(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:", reply_markup=kb.inline_keyboard_options)
    await callback.answer()


@dp.callback_query(F.data.in_({'option_1', 'option_2'}))
async def option_selected(callback: CallbackQuery):
    if callback.data == "option_1":
        option = "–û–ø—Ü–∏—è 1"
    else:
        option = "–û–ø—Ü–∏—è 2"
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {option}")
    await callback.answer()


@dp.message(F.text == "–ü—Ä–∏–≤–µ—Ç")
async def hello (message: Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!')

@dp.message(F.text == "–ü–æ–∫–∞")
async def bye(message: Message):
    await message.answer(f'–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {message.from_user.first_name}!')


@dp.message(Command('voice'))
async def voice(message: Message):
    voice = FSInputFile("audio_voice.ogg")
    await message.answer_voice(voice)

@dp.message(Command('doc'))
async def doc(message: Message):
    doc = FSInputFile("tart.pdf")
    await bot.send_document(message.chat.id, doc)

@dp.message(Command('photo'))
async def photo(message: Message):
    photos = [
        'https://i.pinimg.com/736x/4f/ec/27/4fec278fca401b21166b6d3389a271bc.jpg',
        'https://i.pinimg.com/736x/87/65/95/8765951856fd5e8b415b0d8620af2034.jpg',
        'https://i.pinimg.com/originals/59/d0/1f/59d01f805d4971d4694164d5dec46616.png'
    ]
    rand_photo = random.choice(photos)
    await message.answer_photo(photo=rand_photo, caption='–õ–æ–≤–∏ —Å–ª–æ–Ω–∏–∫–∞!')

@dp.message(Command('help'))
async def help(message: Message):
    await message.answer('–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –∫–æ–µ-—á—Ç–æ:\n/start\n/help\n/photo\n/weather\n&—Ç–µ–∫—Å—Ç ‚Äî –ø–µ—Ä–µ–≤–æ–¥ –∏ –æ–∑–≤—É—á–∫–∞')

@dp.message(Command('weather'))
async def get_weather(message: Message):
    city = 'Pyatigorsk'
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru'

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                temp = data['main']['temp']
                description = data['weather'][0]['description']
                await message.answer(f'–ü–æ–≥–æ–¥–∞ –≤ –ü—è—Ç–∏–≥–æ—Ä—Å–∫–µ: {temp}¬∞C, {description}')
            else:
                await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ üòî')


# –ü–µ—Ä–µ–≤–æ–¥ &—Ç–µ–∫—Å—Ç
@dp.message(F.text.startswith('&'))
async def translate_and_speak(message: Message):
    text_ru = message.text[1:].strip()

    if not text_ru:
        await message.answer("‚ùóÔ∏è–ü–æ—Å–ª–µ `&` –Ω–∏—á–µ–≥–æ –Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return

    try:
        text_en = GoogleTranslator(source='ru', target='en').translate(text_ru)
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ üòî")
        return

    try:
        tts = gTTS(text_en, lang='en')
        filename = f"audio_{message.from_user.id}.mp3"
        tts.save(filename)
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∫–µ üé§")
        return

    await message.answer(f"–ü–µ—Ä–µ–≤–æ–¥: {text_en}")
    voice_file = FSInputFile(filename)
    await message.answer_voice(voice_file)
    os.remove(filename)

@dp.message(F.photo)
async def react_photo(message: Message):
    responses = ['–ö–ª–∞—Å—Å–Ω–∞—è —Ñ–æ—Ç–∫–∞! –°–æ—Ö—Ä–∞–Ω—è–µ–º!', '–í–∞—É! –ø—Ä–∏—Å—ã–ª–∞–π –µ—â–µ! –°–æ—Ö—Ä–∞–Ω—è–µ–º', '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–æ—Ç–æ! –°–æ—Ö—Ä–∞–Ω—è–µ–º!']
    await message.answer(random.choice(responses))
    await bot.download(message.photo[-1], destination=f'img/{message.photo[-1].file_id}.jpg')


@dp.message(F.text == '–ß—Ç–æ —Ç–∞–∫–æ–µ –∑–µ—Ä–æ–∫–æ–¥–∏–Ω–≥?')
async def aitext(message: Message):
    await message.answer('–ó–µ—Ä–æ–∫–æ–¥–∏–Ω–≥ (zero-code, no-code) ‚Äî —ç—Ç–æ –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–π—Ç–æ–≤ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –±–µ–∑ –∫–æ–¥–∞')

@dp.message(CommandStart)
async def start(message: Message):
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É', reply_markup= kb.main)


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
